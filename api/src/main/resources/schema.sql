-- VibePay Database Schema
-- PostgreSQL

-- Drop tables if exist (reverse order due to foreign keys)
DROP TABLE IF EXISTS PAYMENT_INTERFACE_REQUEST_LOG CASCADE;
DROP TABLE IF EXISTS PAYMENT CASCADE;
DROP TABLE IF EXISTS ORDER_ITEM CASCADE;
DROP TABLE IF EXISTS ORDERS CASCADE;
DROP TABLE IF EXISTS POINT_HISTORY CASCADE;
DROP TABLE IF EXISTS REWARD_POINTS CASCADE;
DROP TABLE IF EXISTS PRODUCT CASCADE;
DROP TABLE IF EXISTS MEMBER CASCADE;

-- Drop sequences if exist
DROP SEQUENCE IF EXISTS MEMBER_ID_SEQ CASCADE;
DROP SEQUENCE IF EXISTS PRODUCT_ID_SEQ CASCADE;
DROP SEQUENCE IF EXISTS REWARD_POINTS_ID_SEQ CASCADE;
DROP SEQUENCE IF EXISTS POINT_HISTORY_ID_SEQ CASCADE;
DROP SEQUENCE IF EXISTS ORDER_ID_SEQ CASCADE;
DROP SEQUENCE IF EXISTS ORDER_ITEM_ID_SEQ CASCADE;
DROP SEQUENCE IF EXISTS CLAIM_ID_SEQ CASCADE;
DROP SEQUENCE IF EXISTS PAYMENT_ID_SEQ CASCADE;
DROP SEQUENCE IF EXISTS PAYMENT_INTERFACE_REQUEST_LOG_ID_SEQ CASCADE;

-- ================================================================================
-- Sequences
-- ================================================================================

CREATE SEQUENCE MEMBER_ID_SEQ
    START 1
    INCREMENT 1
    MINVALUE 1
    MAXVALUE 99999999;

CREATE SEQUENCE PRODUCT_ID_SEQ
    START 1
    INCREMENT 1
    MINVALUE 1
    MAXVALUE 99999999;

CREATE SEQUENCE REWARD_POINTS_ID_SEQ
    START 1
    INCREMENT 1
    MINVALUE 1
    MAXVALUE 99999999;

CREATE SEQUENCE POINT_HISTORY_ID_SEQ
    START 1
    INCREMENT 1
    MINVALUE 1
    MAXVALUE 99999999;

CREATE SEQUENCE ORDER_ID_SEQ
    START 1
    INCREMENT 1
    MINVALUE 1
    MAXVALUE 99999999
    CYCLE;

CREATE SEQUENCE ORDER_ITEM_ID_SEQ
    START 1
    INCREMENT 1
    MINVALUE 1
    MAXVALUE 99999999;

CREATE SEQUENCE CLAIM_ID_SEQ
    START 1
    INCREMENT 1
    MINVALUE 1
    MAXVALUE 99999999
    CYCLE;

CREATE SEQUENCE PAYMENT_ID_SEQ
    START 1
    INCREMENT 1
    MINVALUE 1
    MAXVALUE 99999999
    CYCLE;

CREATE SEQUENCE PAYMENT_INTERFACE_REQUEST_LOG_ID_SEQ
    START 1
    INCREMENT 1
    MINVALUE 1
    MAXVALUE 99999999
    CYCLE;

-- ================================================================================
-- Tables
-- ================================================================================

-- 1. MEMBER
CREATE TABLE IF NOT EXISTS MEMBER (
    MEMBER_ID BIGSERIAL PRIMARY KEY,
    NAME VARCHAR(255) NOT NULL,
    SHIPPING_ADDRESS VARCHAR(255),
    PHONE_NUMBER VARCHAR(255),
    EMAIL VARCHAR(255),
    CREATED_AT TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
);

COMMENT ON TABLE MEMBER IS '회원';
COMMENT ON COLUMN MEMBER.MEMBER_ID IS '회원 ID';
COMMENT ON COLUMN MEMBER.NAME IS '이름';
COMMENT ON COLUMN MEMBER.SHIPPING_ADDRESS IS '배송지 주소';
COMMENT ON COLUMN MEMBER.PHONE_NUMBER IS '전화번호';
COMMENT ON COLUMN MEMBER.EMAIL IS '이메일';
COMMENT ON COLUMN MEMBER.CREATED_AT IS '생성일시';

-- 2. PRODUCT
CREATE TABLE IF NOT EXISTS PRODUCT (
    PRODUCT_ID BIGSERIAL PRIMARY KEY,
    NAME VARCHAR(255) NOT NULL,
    PRICE DOUBLE PRECISION NOT NULL
);

COMMENT ON TABLE PRODUCT IS '상품';
COMMENT ON COLUMN PRODUCT.PRODUCT_ID IS '상품 ID';
COMMENT ON COLUMN PRODUCT.NAME IS '상품명';
COMMENT ON COLUMN PRODUCT.PRICE IS '가격';

-- 3. REWARD_POINTS
CREATE TABLE IF NOT EXISTS REWARD_POINTS (
    REWARD_POINTS_ID BIGSERIAL PRIMARY KEY,
    MEMBER_ID BIGINT NOT NULL,
    POINTS DOUBLE PRECISION NOT NULL DEFAULT 0.0,
    LAST_UPDATED TIMESTAMP NOT NULL,
    CONSTRAINT FK_MEMBER_REWARD_POINTS FOREIGN KEY (MEMBER_ID) REFERENCES MEMBER(MEMBER_ID)
);

COMMENT ON TABLE REWARD_POINTS IS '적립금';
COMMENT ON COLUMN REWARD_POINTS.REWARD_POINTS_ID IS '적립금 ID';
COMMENT ON COLUMN REWARD_POINTS.MEMBER_ID IS '회원 ID';
COMMENT ON COLUMN REWARD_POINTS.POINTS IS '적립금';
COMMENT ON COLUMN REWARD_POINTS.LAST_UPDATED IS '최종 업데이트 일시';

-- 4. POINT_HISTORY
CREATE TABLE IF NOT EXISTS POINT_HISTORY (
    POINT_HISTORY_ID BIGSERIAL PRIMARY KEY,
    MEMBER_ID BIGINT NOT NULL,
    POINT_AMOUNT DOUBLE PRECISION NOT NULL,
    BALANCE_AFTER DOUBLE PRECISION NOT NULL,
    TRANSACTION_TYPE VARCHAR(20) NOT NULL,
    REFERENCE_TYPE VARCHAR(20),
    REFERENCE_ID VARCHAR(50),
    DESCRIPTION VARCHAR(255),
    CREATED_AT TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT FK_MEMBER_POINT_HISTORY FOREIGN KEY (MEMBER_ID) REFERENCES MEMBER(MEMBER_ID)
);

COMMENT ON TABLE POINT_HISTORY IS '적립금 이력';
COMMENT ON COLUMN POINT_HISTORY.POINT_HISTORY_ID IS '적립금 이력 ID';
COMMENT ON COLUMN POINT_HISTORY.MEMBER_ID IS '회원 ID';
COMMENT ON COLUMN POINT_HISTORY.POINT_AMOUNT IS '적립금 증감액';
COMMENT ON COLUMN POINT_HISTORY.BALANCE_AFTER IS '변경 후 잔액';
COMMENT ON COLUMN POINT_HISTORY.TRANSACTION_TYPE IS '거래 유형 (EARN/USE/REFUND)';
COMMENT ON COLUMN POINT_HISTORY.REFERENCE_TYPE IS '참조 유형';
COMMENT ON COLUMN POINT_HISTORY.REFERENCE_ID IS '참조 ID';
COMMENT ON COLUMN POINT_HISTORY.DESCRIPTION IS '설명';
COMMENT ON COLUMN POINT_HISTORY.CREATED_AT IS '생성일시';

-- 5. ORDERS
CREATE TABLE IF NOT EXISTS ORDERS (
    ORDER_ID VARCHAR(17),
    ORD_SEQ INTEGER NOT NULL,
    ORD_PROC_SEQ INTEGER NOT NULL,
    CLAIM_ID VARCHAR(17),
    MEMBER_ID BIGINT NOT NULL,
    ORDER_DATE TIMESTAMP NOT NULL,
    TOTAL_AMOUNT DOUBLE PRECISION NOT NULL,
    STATUS VARCHAR(50) NOT NULL,
    CONSTRAINT FK_MEMBER_ORDER FOREIGN KEY (MEMBER_ID) REFERENCES MEMBER(MEMBER_ID),
    CONSTRAINT PK_ORDERS PRIMARY KEY (ORDER_ID, ORD_SEQ, ORD_PROC_SEQ)
);

COMMENT ON TABLE ORDERS IS '주문';
COMMENT ON COLUMN ORDERS.ORDER_ID IS '주문 ID (YYYYMMDDOXXXXXXXX)';
COMMENT ON COLUMN ORDERS.ORD_SEQ IS '주문 순번';
COMMENT ON COLUMN ORDERS.ORD_PROC_SEQ IS '주문 처리 순번 (1=원주문, 2=취소)';
COMMENT ON COLUMN ORDERS.CLAIM_ID IS '클레임 ID (YYYYMMDDCXXXXXXXX)';
COMMENT ON COLUMN ORDERS.MEMBER_ID IS '회원 ID';
COMMENT ON COLUMN ORDERS.ORDER_DATE IS '주문일시';
COMMENT ON COLUMN ORDERS.TOTAL_AMOUNT IS '총 금액';
COMMENT ON COLUMN ORDERS.STATUS IS '상태';

-- 6. ORDER_ITEM
CREATE TABLE IF NOT EXISTS ORDER_ITEM (
    ORDER_ITEM_ID BIGSERIAL PRIMARY KEY,
    ORDER_ID VARCHAR(17) NOT NULL,
    ORD_SEQ INTEGER NOT NULL,
    ORD_PROC_SEQ INTEGER NOT NULL,
    PRODUCT_ID BIGINT NOT NULL,
    QUANTITY INTEGER NOT NULL,
    PRICE_AT_ORDER DOUBLE PRECISION NOT NULL,
    CONSTRAINT FK_ORDER_ITEM_PRODUCT FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCT(PRODUCT_ID)
);

COMMENT ON TABLE ORDER_ITEM IS '주문 상품';
COMMENT ON COLUMN ORDER_ITEM.ORDER_ITEM_ID IS '주문 상품 ID';
COMMENT ON COLUMN ORDER_ITEM.ORDER_ID IS '주문 ID';
COMMENT ON COLUMN ORDER_ITEM.ORD_SEQ IS '주문 순번';
COMMENT ON COLUMN ORDER_ITEM.ORD_PROC_SEQ IS '주문 처리 순번';
COMMENT ON COLUMN ORDER_ITEM.PRODUCT_ID IS '상품 ID';
COMMENT ON COLUMN ORDER_ITEM.QUANTITY IS '수량';
COMMENT ON COLUMN ORDER_ITEM.PRICE_AT_ORDER IS '주문 시 가격';

-- 7. PAYMENT
CREATE TABLE IF NOT EXISTS PAYMENT (
    PAYMENT_ID VARCHAR(17) NOT NULL,
    MEMBER_ID BIGINT NOT NULL,
    ORDER_ID VARCHAR(17) NOT NULL,
    CLAIM_ID VARCHAR(17),
    AMOUNT DOUBLE PRECISION NOT NULL,
    PAYMENT_METHOD VARCHAR(50) NOT NULL,
    PAY_TYPE VARCHAR(20) NOT NULL,
    PG_COMPANY VARCHAR(50),
    STATUS VARCHAR(50) NOT NULL,
    ORDER_STATUS VARCHAR(50) NOT NULL,
    TRANSACTION_ID VARCHAR(255),
    PAYMENT_DATE TIMESTAMP NOT NULL,
    CONSTRAINT FK_MEMBER_PAYMENT FOREIGN KEY (MEMBER_ID) REFERENCES MEMBER(MEMBER_ID),
    CONSTRAINT PK_PAYMENT PRIMARY KEY (PAYMENT_ID, PAYMENT_METHOD, ORDER_ID, PAY_TYPE)
);

COMMENT ON TABLE PAYMENT IS '결제';
COMMENT ON COLUMN PAYMENT.PAYMENT_ID IS '결제 ID (YYYYMMDDPXXXXXXXX)';
COMMENT ON COLUMN PAYMENT.MEMBER_ID IS '회원 ID';
COMMENT ON COLUMN PAYMENT.ORDER_ID IS '주문 ID';
COMMENT ON COLUMN PAYMENT.CLAIM_ID IS '클레임 ID';
COMMENT ON COLUMN PAYMENT.AMOUNT IS '결제 금액';
COMMENT ON COLUMN PAYMENT.PAYMENT_METHOD IS '결제 수단 (CREDIT_CARD/POINT)';
COMMENT ON COLUMN PAYMENT.PAY_TYPE IS '결제 유형 (PAYMENT/REFUND)';
COMMENT ON COLUMN PAYMENT.PG_COMPANY IS 'PG사 (INICIS/NICEPAY/TOSS)';
COMMENT ON COLUMN PAYMENT.STATUS IS '결제 상태 (READY/APPROVED/CANCELLED/COMPLETED)';
COMMENT ON COLUMN PAYMENT.ORDER_STATUS IS '주문 상태 (ORDER/CANCELED)';
COMMENT ON COLUMN PAYMENT.TRANSACTION_ID IS '거래 ID';
COMMENT ON COLUMN PAYMENT.PAYMENT_DATE IS '결제일시';

-- 8. PAYMENT_INTERFACE_REQUEST_LOG
CREATE TABLE IF NOT EXISTS PAYMENT_INTERFACE_REQUEST_LOG (
    LOG_ID BIGSERIAL PRIMARY KEY,
    PAYMENT_ID VARCHAR(17),
    REQUEST_TYPE VARCHAR(50) NOT NULL,
    REQUEST_PAYLOAD TEXT,
    RESPONSE_PAYLOAD TEXT,
    TIMESTAMP TIMESTAMP NOT NULL
);

COMMENT ON TABLE PAYMENT_INTERFACE_REQUEST_LOG IS '결제 인터페이스 요청 로그';
COMMENT ON COLUMN PAYMENT_INTERFACE_REQUEST_LOG.LOG_ID IS '로그 ID';
COMMENT ON COLUMN PAYMENT_INTERFACE_REQUEST_LOG.PAYMENT_ID IS '결제 ID';
COMMENT ON COLUMN PAYMENT_INTERFACE_REQUEST_LOG.REQUEST_TYPE IS '요청 유형';
COMMENT ON COLUMN PAYMENT_INTERFACE_REQUEST_LOG.REQUEST_PAYLOAD IS '요청 페이로드';
COMMENT ON COLUMN PAYMENT_INTERFACE_REQUEST_LOG.RESPONSE_PAYLOAD IS '응답 페이로드';
COMMENT ON COLUMN PAYMENT_INTERFACE_REQUEST_LOG.TIMESTAMP IS '생성일시';

-- ================================================================================
-- Indexes
-- ================================================================================

CREATE INDEX IDX_REWARD_POINTS_MEMBER_ID ON REWARD_POINTS(MEMBER_ID);
CREATE INDEX IDX_POINT_HISTORY_MEMBER_ID ON POINT_HISTORY(MEMBER_ID);
CREATE INDEX IDX_ORDERS_MEMBER_ID ON ORDERS(MEMBER_ID);
CREATE INDEX IDX_ORDER_ITEM_ORDER_ID ON ORDER_ITEM(ORDER_ID);
CREATE INDEX IDX_ORDER_ITEM_PRODUCT_ID ON ORDER_ITEM(PRODUCT_ID);
CREATE INDEX IDX_PAYMENT_MEMBER_ID ON PAYMENT(MEMBER_ID);
CREATE INDEX IDX_PAYMENT_ORDER_ID ON PAYMENT(ORDER_ID);
CREATE INDEX IDX_PAYMENT_LOG_PAYMENT_ID ON PAYMENT_INTERFACE_REQUEST_LOG(PAYMENT_ID);
